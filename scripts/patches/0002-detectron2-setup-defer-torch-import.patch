--- a/setup.py
+++ b/setup.py
@@ -4,14 +4,20 @@
 import glob
 import os
 import shutil
+import sys
 from os import path
 from setuptools import find_packages, setup
 from typing import List
-import torch
-from torch.utils.cpp_extension import CUDA_HOME, CppExtension, CUDAExtension
+# torch.utils.cpp_extension imports moved to get_extensions() to avoid ModuleNotFoundError
 
-torch_ver = [int(x) for x in torch.__version__.split(".")[:2]]
-assert torch_ver >= [1, 8], "Requires PyTorch >= 1.8"
+
+
+def _get_torch_version():
+    import torch
+    return [int(x) for x in torch.__version__.split(".")[:2]]
+
+
+def _get_build_ext_class():
+    try:
+        from torch.utils.cpp_extension import BuildExtension
+        return BuildExtension
+    except ImportError:
+        return type('DummyBuildExt', (), {'run': lambda self: None})
 
-
 def get_version():
@@ -38,6 +44,21 @@ def get_version():
 
 
 def get_extensions():
+    # Skip extension building during build requirements detection
+    # This is called by setuptools even when just determining build requirements
+    if any(arg in sys.argv for arg in ['egg_info', 'dist_info', '--help-commands', '--name', '--version']):
+        return []
+    
+    # Import torch only when actually building extensions
+    try:
+        import torch
+        from torch.utils.cpp_extension import CUDA_HOME, CppExtension, CUDAExtension
+        torch_ver = _get_torch_version()
+        assert torch_ver >= [1, 8], "Requires PyTorch >= 1.8"
+    except ImportError:
+        return []
+    except Exception:
+        return []
+    
     this_dir = path.dirname(path.abspath(__file__))
     extensions_dir = path.join(this_dir, "detectron2", "layers", "csrc")
 
@@ -204,9 +225,6 @@ setup(
         ],
     },
     ext_modules=get_extensions(),
-    cmdclass={"build_ext": torch.utils.cpp_extension.BuildExtension},
+    cmdclass={"build_ext": _get_build_ext_class()},
 )
-
-
-def _get_build_ext_class():
-    try:
-        from torch.utils.cpp_extension import BuildExtension
-        return BuildExtension
-    except ImportError:
-        return type('DummyBuildExt', (), {'run': lambda self: None})
