###########################################################################################
# A schematic for the split-inference pipline
#              Fold                                                        Fold
#            ┌ ─── ┐                                                     ┌ ─── ┐
#            |     |                                                     |     |
#            |     │                                                     |     │
#      ┌─────┴─────▼─────┐                                         ┌─────┴─────▼─────┐
#      │                 │     ┌───────────┐     ┌───────────┐     │                 │
#      │     NN Task     │     │           │     │           │     │      NN Task    │
# ────►│                 ├────►│  Encoder  ├────►│  Decoder  ├────►│                 ├────►
#      │      Part 1     │     │           │     │           │     │      Part 2     │
#      │                 │     └───────────┘     └───────────┘     │                 │
#      └─────────────────┘                                         └─────────────────┘

#     ──────►──────►──────►──────►──────►───Unfold───►──────►──────►──────►──────►──────►
###########################################################################################

name: 'split-inference'
type: 'fold' # If type is fold, all feature tensors for the input are first computed before proceeding encoding process
output_dir: ${paths._runs_root}/${.name}-${.type}


nn_task_part1:
    load_features: False
    dump_features: True
    feature_dir: ${..output_dir}/${dataset.config.dataset_name}/features
nn_task_part2:
    dump_results: False
    output_results_dir: ${..output_dir}/${dataset.config.dataset_name}/output_results
evaluation:
    bypass: False
    dump: True
    evaluation_dir: ${..output_dir}/${dataset.config.dataset_name}/evaluation