###########################################################################################
# A schematic for the split-inference pipline                                             #
#                                                                                         #
#             Fold                                                        Fold            #
#           ┌ ─── ┐                                                     ┌ ─── ┐           #
#           |     │                                                     |     │           #
#           |     │                                                     |     │           #
#     ┌─────|─────▼─────┐                                         ┌─────|─────▼─────┐     #
#     │                 │     ┌───────────┐     ┌───────────┐     │                 │     #
#     │      Pre-       │     │           │     │           │     │      Post-      │     #
#────►│                 ├────►│  Encoder  ├────►│  Decoder  ├────►│                 ├────►#
#     │    Inference    │     │           │     │           │     │    Inference    │     #
#     │                 │     └───────────┘     └───────────┘     │                 │     #
#     └─────────────────┘                                         └─────────────────┘     #
#                                                                                         #
#    ──────►──────►──────►──────►──────►───Unfold───►──────►──────►──────►──────►──────►  #
###########################################################################################

name: 'split-inference'
type: 'fold' # If type is fold, all feature tensors for the input are first computed before proceeding encoding process
output_dir: ${paths._runs_root}/.cache_pipline/${.type}-${.name}

cache: 
  enabled: False
  keep: False
  dir:

  preinference: True
  encoder: False
  decoder: False
  postinference: False
  evaluation: True

