type: "fctm"
eval_encode: "bitrate" # or "bpp"
experiment: "" # e.g. "_preset_medium" name experiment preceded by "_"
output_dir: "${pipeline.output_dir_root}/${.type}${.experiment}/${dataset.datacatalog}/${dataset.config.dataset_name}/qp${codec.tools.inner_codec.enc_configs.qp}"
bitstream_name: "${dataset.config.dataset_name}_qp${codec.tools.inner_codec.enc_configs.qp}"

#============================== Configuration below are the same with fctm.yaml in FCTM v9 =========================================
# NOTE: Configuration below can always be replaced with the latest fctm.yaml in FCTM if there are any incompatiable issues

verbosity: 0

coding_behaviour: "all"
device:
  all: "cpu"
  enc: ${codec.device.all}
  dec: ${codec.device.all}
mac_computation: False # multipy-accumulate computation

fcm_sample_stream_wrapper_enabled: True

enc_configs:
  qp: 27
  frame_rate: 30
  intra_period: 1
  n_bit: 10
  parallel_encoding: False # std inner codec parallel option
  max_subprocess_limit: null # null = implicit CPU count limit, value = explicit (integer) limit
  hash_check: 0 # md5 hash check

tools:
  feature_scale: # Encoder only
    enabled: False

  feature_transform:
    enabled: False

  feature_importance_computation:
    enabled: False
    pre_computed: null

  feature_reduction: # reserved for restoration part as well
    nn_feature_inv_transform:
      name: 'light_fedrnet' # (m71247) 'light_fedrnet_with_nn_codec' (m73346)
      selective_learning_strategy: False # by default (m71203)
      split_ctx: "obj" # or "seg" # or "alt1" or "dn53"
      model_dir: "pretrained_weights"
      cttc_model: True

    channel_rearrangement: 
      enabled: True

    channel_removal: # (m71203)
      enabled: True  # by default
      period: ${codec.enc_configs.intra_period}
      # When nn_feature_inv_transform.selective_learning_strategy or channel_rearrangement.enabled is equal to True
      # channel_removal_indication should also be inferred to be True in S/W
      channel_restoration_indication: False # test all configs
      use_lcr: True # (m74096)
      
    temporal_resampling_enabled: False # (m67615)
    # To properly enable Temporal resampling ,
    # temporal_resampling_enabled = True and
    # "cfgs/codec/vtm-23.3/encoder_lowdelay_vtm_gop4.cfg" must be used

  refinements: # (m68664)
    on_restored_ftensor: # (m68391)
      enabled: True
      period: ${codec.enc_configs.intra_period}
    on_reduced_ftensor:
      enabled: True
      period: ${codec.enc_configs.intra_period}

  conversion:
    type: 'tensor_packing' # or 'bypass'
    n_bit: ${codec.enc_configs.n_bit}
    resized_channel_packing: # (m71931)
      enabled: True
      period: ${codec.enc_configs.intra_period}
      use_lcr: True # (m74096)

  inner_codec:
    type: 'vtm'
    stash_outputs: True
    inner_coding_max_chroma_format: 0 # 4:0:0 only
    inner_coding_max_pred_constraint: 1 # Intra + uni-prediction (I, P slices)
    enc_configs: ${codec.enc_configs}
    split_ctx: ${codec.tools.feature_reduction.nn_feature_inv_transform.split_ctx}
    codec_paths:
      _root: "/path/to/vtm" # of HM, JM...
      enc_exe: "${._root}/bin/EncoderAppStatic" # or TappEncoderStatic, lencod...
      dec_exe: "${._root}/bin/DecoderAppStatic" # or TappDecoderStatic, ldecod...
      merge_exe: "${._root}/bin/parcatStatic"
      cfg_file: "${._root}/cfg/encoder_intra_vtm.cfg"
      default_cfg_file: "${._root}/cfg/encoder.cfg"

    # two variables below are needed when type is "nn_inner_codec"
    enc_weight: "pretrained_weights/path/to/inner_encoder_weight"
    dec_weight: "pretrained_weights/path/to/inner_encoder_weight"

sei_messages:
  vision_model_info:
    enabled: True

  vision_model_cfg:
    enabled: False
    update: False
    conf_thres: 0.05
    max_dets: 100
