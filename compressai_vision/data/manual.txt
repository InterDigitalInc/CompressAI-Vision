compressai-vision [options] command 

for an all-automatic no-brainer, please try: "compressai-nokia-auto-import help" 
that substitutes for download, nokia_convert and register commands.

commands & parameters:

    --y                 non-interactive download

    manual
                        shows this manual

    download            download image set _and_ register it to fiftyone.

        --name          name of the dataset.  Default: "open-images-v6".
        --lists         list files that define the subset of images to download.
        --split         typically "train" or "validation".  Default: "validation".
        --dir           directory where the dataset (images, annotations, etc.) is downloaded
                        Default: $HOME/fiftyone/dataset-name

        example: (downloads images corresponding to nokia's detection & segmentation
                 test sets)

            compressai-vision download \\
            --lists=detection_validation_input_5k.lst,segmentation_validation_input_5k.lst \\
            --name=open-image-v6 --split=validation

    list                list all image sets registered to fiftyone

    deregister          de-register image set from fiftyone

        --name          name of the dataset, for example "open-image-v6"
        --split         name of the split, for example "validation"

    dummy               create & register a dummy database with just the first sample

        --name          name of the original database
                        name of the new database will be appended with "-dummy"

    nokia_convert       convert nokia-provided files into proper OpenImageV6
                        format & directory structure

        --lists         file listing necessary images, i.e.
                        "detection_validation_input_5k.lst" or
                        "segmentation_validation_input_5k.lst"
        --dir           a base OpenImageV6 dataset dir:
                        images are taken from "[dir]/data/" and masks from
                        "[dir]/labels/masks/"
        --target_dir    target directory directory for the converted format
        --label         image-level labels, i.e.
                        "detection_validation_labels_5k.csv" or
                        "segmentation_validation_labels_5k.csv"
        --bbox          bbox data, i.e.
                        "detection_validation_5k_bbox.csv" or
                        "segmentation_validation_bbox_5k.csv"
        --mask          segmentation masks,
                        i.e. "segmentation_validation_masks_5k.csv"
        example:

            compressai-vision nokia-convert
                --lists=detection_validation_input_5k.lst \\
                --bbox=detection_validation_5k_bbox.csv
                --label=detection_validation_labels_5k.csv \\
                --dir=~/fiftyone/open-image-v6/validation --target_dir=/path/to/dir

    register            register image set to fiftyone from local dir

        --name          database registered name
        --lists         lst files that define the subset of images to register
        --dir           source directory
        --type          fiftyone.types name.  Default: "OpenImagesV6Dataset"

        example:        (register converted nokia files into fiftyone)

            compressai-vision register
                --name=nokia-import
                --dir=~/somedir/nokia-import

    detectron2_eval     evaluate model with detectron2 using OpenImageV6
                        evaluation protocol optionally with no (de)compression or
                        with compressai or vtm

        --name          name of the fiftyone registered database
        --model         name of the detectron2 model
                        for example:
                        COCO-Detection/faster_rcnn_X_101_32x8d_FPN_3x.yaml
        --output        outputfile, default: compressai-vision.json
        --compressai    compressai model (optional), for example: bmshj2018_factorized
        --vtm           use vtm model (optional)
        --qpars         quality parameters to be used with either compressai or vtm
                        WARNING/TODO : currently works only for detections
                        (not for segmentations)
        --scale         ffmpeg scaling applied to the image as defined per VCM working group.
                        values can be: 100 (original size), 75, 50, 25.
                        0 = no scaling applied
        --vtm_dir       specify path to directory "VVCSoftware_VTM/bin", i.e. to the
                        directory where there are executables "EncoderAppStatic" and
                        "DecoderAppStatic".  If not specified, tries to use the
                        environmental variable VTM_DIR
        --ffmpeg        specify ffmpeg command.  If not specified, uses "ffmpeg".
        --vtm_cfg       path to vtm config file.  If not specified uses an internal
                        default file.
        --vtm_cache     specify a path to directory where the bitstreams are cached.
                        The program saves bitstream to disk and tries to recycle the
                        bitstreams saved earlier.
                        Default: no caching.
                        NOTE: the path is automatically appended with 
                        "scale/quality-parameter/" (see --scale)
        --debug         debug verbosity for the CompressAI & VTM
        --progressbar   show a fancy progressbar.  Default: false.  Nice for interactive runs.
        --progress      show progress every n:th step, i.e. --progress=10 would print out
                        progress every tenth step.  0: don't print anything. Default: 1.
                        Nice for batch jobs.

        example 1 (calculate mAP):

            compressai-vision detectron2_eval
                --y --name=nokia-detection \\
                --model=COCO-Detection/faster_rcnn_X_101_32x8d_FPN_3x.yaml

        example 2 (calculate mAP=mAP(bpp)):
            compressai-vision detectron2_eval --y --name=nokia-detection \\
                --model=COCO-Detection/faster_rcnn_X_101_32x8d_FPN_3x.yaml \\
                --compressai=bmshj2018_factorized --qpars=1,2,3,4,5,6,7,8

    vtm                 generate bitstream with the vtm video encoder
                        this is done also by the command detectron2_eval, but you
                        can do the bitstream generation step separately.
                        The following options are same as in "detectron2_eval" command:

                        --name, --qpars, --vtm_dir, --ffmpeg, --vtm_cfg, --debug

        --vtm_cache     as in "detectron2_eval" command, but _must_ be defined
        --slice         instead of using the complete dataset, just use a slice of the
                        dataset: good for parallelizing the VTM encoder.  
                        Normal python slicing indexes are used.
        --keep          keep all intermediate files (for debugging)

        example 1:

            compressai-vision vtm
                --y --name=nokia-detection --qpars=38,47 --vtm_cache=/path/to/dir

        example 2 (calculate bitstream for first 100 samples in the dataset):

            compressai-vision vtm
                --y --name=nokia-detection --qpars=22 --vtm_cache=/path/to/dir --slice=0:100


NOTE 1: your normal workflow would be: download, nokia_convert, register, detectron2_eval
the first three steps can be dealt with the compress-nokia-auto-import command

NOTE 2: for vtm, you would typically produce bitstream with the vtm command and only after that,
launch detectron2_eval.  Be sure not to send several parallel (batch) jobs using the same dataset slices.
